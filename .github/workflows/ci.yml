name: CI Pipeline

on:
  push:
    branches: [ "**" ] # all branche
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          touch .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env
          echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env
          echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env
          echo "AZURE_ENDPOINT=${{ secrets.AZURE_ENDPOINT }}" >> .env
          echo "AZURE_KEY=${{ secrets.AZURE_KEY }}" >> .env
          cat .env

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build backend Docker image
        run: docker build -t mallisho/catalog:backend-latest ./backend
        continue-on-error: false

      - name: Build frontend Docker image
        run: docker build -t mallisho/catalog:frontend-latest ./frontend
        continue-on-error: false

      - name: Run backend tests
        run: |
          docker run --rm --env-file .env mallisho/catalog:backend-latest python manage.py test
        continue-on-error: false


      - name: Run frontend tests
        run: |
          docker run --rm --env-file .env mallisho/catalog:frontend-latest python manage.py test
        continue-on-error: false

      - name: Push backend image
        run: docker push mallisho/catalog:backend-latest

      - name: Push frontend image
        run: docker push mallisho/catalog:frontend-latest